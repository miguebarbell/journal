# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- build
- test
- deploy
building:
  stage: build
  image: node:18.1.0
  script:
  - cd client && npm install
  - echo "Installing dependencies for the client."
  - npm run build
  - echo "Note CI variable is false means warnings are not considered errors"
  - echo "Client compiled successfully."
  artifacts:
    paths:
    - client/build
unit-test-job:
  stage: test
  script:
  - echo "Testing."
  - echo "Need set up testing"
lint-test-job:
  stage: test
  script:
  - echo "Linting code... This will take about 10 seconds."
  - echo "Need set up linting."
deploy to s3:
  image: python:3.10.2
  stage: deploy
  dependencies:
  - building
  before_script:
  - pip install awscli
  script:
  - echo "Deploying application..."
  - aws s3 sync ./client/build/ s3://journal.debloat.us
  - echo "Application successfully deployed to s3://journal.debloat.us"
sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml
- template: Security/Dependency-Scanning.gitlab-ci.yml
